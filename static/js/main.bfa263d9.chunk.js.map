{"version":3,"sources":["api/apiSlice.ts","components/Card.tsx","App.tsx","store.ts","index.tsx"],"names":["apiSlice","createApi","reducerPath","baseQuery","fetchBaseQuery","baseUrl","endpoints","builder","getData","query","useGetDataQuery","Card","item","useState","liked","setLiked","className","attributes","title","rooms","address","city","street","house","room","area","unit","relationships","first_name","middle_name","last_name","onClick","App","data","isError","isLoading","response","map","index","configureStore","reducer","middleware","getDefaultMiddleware","concat","ReactDOM","render","store","StrictMode","document","getElementById"],"mappings":"64DAGaA,EAAWC,YAAU,CACjCC,YAAa,MACbC,UAAWC,YAAe,CAAEC,QAAS,2BAErCC,UAAW,SAAAC,GAAO,MAAK,CACtBC,QAASD,EAAQE,MAA4B,CAC5CA,MAAO,iBAAM,mBAKDC,EAAoBV,EAApBU,gB,eC+BAC,EA1CF,SAAC,GAAyB,IAAvBC,EAAsB,EAAtBA,KACf,EAA0BC,oBAAS,GAAnC,mBAAOC,EAAP,KAAcC,EAAd,KAIA,OACC,sBAAKC,UAAU,OAAf,UACC,sBAAKA,UAAU,aAAf,UACC,oBAAIA,UAAU,QAAd,SAAuBJ,EAAKK,WAAWC,QACvC,sBAAKF,UAAU,QAAf,yDAAiCJ,EAAKK,WAAWE,SACjD,sBAAKH,UAAU,UAAf,qDACYJ,EAAKK,WAAWG,QAAQC,KADpC,kBAC+C,IAC7CT,EAAKK,WAAWG,QAAQE,OAF1B,wBAEwCV,EAAKK,WAAWG,QAAQG,MAFhE,mBAGMX,EAAKK,WAAWG,QAAQI,QAE9B,sBAAKR,UAAU,OAAf,yDACWJ,EAAKK,WAAWQ,KAD3B,IACkCb,EAAKK,WAAWS,WAGnD,sBAAKV,UAAU,gBAAf,UACC,qFACYJ,EAAKe,cAAcV,WAAWW,WAAY,IACpDhB,EAAKe,cAAcV,WAAWY,YAAa,IAC3CjB,EAAKe,cAAcV,WAAWa,aAEhC,8BACC,wBACCd,UAAS,sBAAiBF,EAAQ,QAAU,IAC5CiB,QA1BqB,WACzBhB,GAAUD,IAuBP,SAIEA,EACA,mBAAGE,UAAU,iBAEb,mBAAGA,UAAU,4B,QCtBLgB,MAVf,WACC,MAAmCtB,IAA7BuB,EAAN,EAAMA,KAAMC,EAAZ,EAAYA,QAEZ,OAFA,EAAqBC,WACHD,IAASD,EAAOG,KAEjC,qBAAKpB,UAAU,MAAf,SACEiB,GAAQA,EAAKI,KAAI,SAACzB,EAAM0B,GAAP,OAAiB,cAAC,EAAD,CAAkB1B,KAAMA,GAAb0B,S,sBCNlCC,cAAe,CAC7BC,QAAQ,eACNxC,EAASE,YAAcF,EAASwC,SAElCC,WAAY,SAAAC,GAAoB,OAC/BA,IAAuBC,OAAO3C,EAASyC,eCDzCG,IAASC,OACR,cAAC,IAAD,CAAUC,MAAOA,EAAjB,SACC,cAAC,IAAMC,WAAP,UACC,cAAC,EAAD,QAGFC,SAASC,eAAe,W","file":"static/js/main.bfa263d9.chunk.js","sourcesContent":["import { createApi, fetchBaseQuery } from '@reduxjs/toolkit/query/react'\r\nimport { ResponseData } from '../types'\r\n\r\nexport const apiSlice = createApi({\r\n\treducerPath: 'api',\r\n\tbaseQuery: fetchBaseQuery({ baseUrl: 'http://localhost:5000/' }),\r\n\r\n\tendpoints: builder => ({\r\n\t\tgetData: builder.query<ResponseData[], void>({\r\n\t\t\tquery: () => '/response',\r\n\t\t}),\r\n\t}),\r\n})\r\n\r\nexport const { useGetDataQuery } = apiSlice\r\n","import React, { useState } from 'react'\r\nimport { CardProps } from '../types'\r\n\r\nconst Card = ({ item }: CardProps) => {\r\n\tconst [liked, setLiked] = useState(false)\r\n\tconst likeButtonHandler = () => {\r\n\t\tsetLiked(!liked)\r\n\t}\r\n\treturn (\r\n\t\t<div className='cart'>\r\n\t\t\t<div className='attributes'>\r\n\t\t\t\t<h4 className='title'>{item.attributes.title}</h4>\r\n\t\t\t\t<div className='rooms'>Комнаты: {item.attributes.rooms}</div>\r\n\t\t\t\t<div className='address'>\r\n\t\t\t\t\tАдрес: г. {item.attributes.address.city}, ул.{' '}\r\n\t\t\t\t\t{item.attributes.address.street}, дом {item.attributes.address.house},\r\n\t\t\t\t\tкв. {item.attributes.address.room}\r\n\t\t\t\t</div>\r\n\t\t\t\t<div className='area'>\r\n\t\t\t\t\tПлощадь: {item.attributes.area} {item.attributes.unit}\r\n\t\t\t\t</div>\r\n\t\t\t</div>\r\n\t\t\t<div className='relationships'>\r\n\t\t\t\t<div>\r\n\t\t\t\t\tПродавец: {item.relationships.attributes.first_name}{' '}\r\n\t\t\t\t\t{item.relationships.attributes.middle_name}{' '}\r\n\t\t\t\t\t{item.relationships.attributes.last_name}\r\n\t\t\t\t</div>\r\n\t\t\t\t<div>\r\n\t\t\t\t\t<button\r\n\t\t\t\t\t\tclassName={`like-button ${liked ? 'liked' : ''}`}\r\n\t\t\t\t\t\tonClick={likeButtonHandler}\r\n\t\t\t\t\t>\r\n\t\t\t\t\t\t{liked ? (\r\n\t\t\t\t\t\t\t<i className='fas fa-heart'></i>\r\n\t\t\t\t\t\t) : (\r\n\t\t\t\t\t\t\t<i className='far fa-heart'></i>\r\n\t\t\t\t\t\t)}\r\n\t\t\t\t\t</button>\r\n\t\t\t\t</div>\r\n\t\t\t</div>\r\n\t\t</div>\r\n\t)\r\n}\r\n\r\nexport default Card\r\n","import React from 'react'\nimport { useGetDataQuery } from './api/apiSlice'\nimport Card from './components/Card'\nimport { response } from './entities.json'\nfunction App() {\n\tlet { data, isError, isLoading } = useGetDataQuery()\n\tif (!isLoading && isError) data = response\n\treturn (\n\t\t<div className='App'>\n\t\t\t{data && data.map((item, index) => <Card key={index} item={item} />)}\n\t\t</div>\n\t)\n}\n\nexport default App\n","import { configureStore } from '@reduxjs/toolkit'\r\nimport { apiSlice } from './api/apiSlice'\r\n\r\nexport default configureStore({\r\n\treducer: {\r\n\t\t[apiSlice.reducerPath]: apiSlice.reducer,\r\n\t},\r\n\tmiddleware: getDefaultMiddleware =>\r\n\t\tgetDefaultMiddleware().concat(apiSlice.middleware),\r\n})\r\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport './index.css'\nimport App from './App'\nimport { Provider } from 'react-redux'\nimport store from './store'\n\nReactDOM.render(\n\t<Provider store={store}>\n\t\t<React.StrictMode>\n\t\t\t<App />\n\t\t</React.StrictMode>\n\t</Provider>,\n\tdocument.getElementById('root')\n)\n"],"sourceRoot":""}